item<-c("A","B")
Type<-c("403P","1200C")
test_df<-data.frame(item, Type)
test_df
test_df$split_type<-strsplit(test_df$Type, "(?=[A-Za-z])(?<=[0-9])|(?=[0-9])(?<=[A-Za-z])", perl=TRUE)
test_df$split_type<-do.call(rbind, test_df$split_type)|>
data.frame()|>
rename(A = X1, B = X2)
test_df
test_df |>
filter(item == "A")
test_df |>
filter(item == "A") |>
select(item,split_type)
test_df |> ncol()
item<-c("A","B")
Type<-c("403P","1200C")
test_df<-data.frame(item, Type)
test_df
test_df$split_type<-strsplit(test_df$Type, "(?=[A-Za-z])(?<=[0-9])|(?=[0-9])(?<=[A-Za-z])", perl=TRUE)
test_df$split_type<-do.call(rbind, test_df$split_type)|>
data.frame()|>
rename(A = X1, B = X2)
test_df |> ncol()
test_df
test_df |>
filter(item == "A") |>
select(item,split_type)
test_df |>
filter(item == "A") |>
select(item,split_type.A)
test_df |> View()
test_df
# Splitting the 'Type' column into two columns
split_type <- strsplit(as.character(test_df$Type), "(?<=\\d)(?=\\D)|(?<=\\D)(?=\\d)", perl=TRUE)
# Converting the list to a data frame and renaming the columns
split_df <- do.call(rbind, split_type)
split_df <- data.frame(split_df, stringsAsFactors = FALSE)
colnames(split_df) <- c("A", "B")
# Combining the original data frame with the split data frame
test_df <- cbind(test_df, split_df)
print(test_df)
test_df |> View()
test_df |>
filter(item == "A") |>
select(item,A)
test_df$split_type$A
df_list <- list()
df1 <- data.frame(
cam = letters[1:5],
num = 1:5
)
df_list <- list()
for(i in 1:5){
df_list[[i]] <- data.frame(cam = letters[1:5],num = 1:5)
}
df_list[[1]]
df_list[[2]]
df_list[[3]]
df_list[[4]]
df_list[[5]]
df_list[[6]]
df_list[[5]]
cases_df <- list()
case_line <- list(A = 1:5,B = 2:4,C = 7:10)
case_line
cases_df <- list()
for(i in 1:length(cases_line)){
cases_df[[i]] <- data.frame(line=1:length(cases_lines[[i]]), text=cases_lines[[i]])
}
cases_line <- list(A = 1:5,B = 2:4,C = 7:10)
cases_df <- list()
for(i in 1:length(cases_line)){
cases_df[[i]] <- data.frame(line=1:length(cases_lines[[i]]), text=cases_lines[[i]])
}
cases_df <- list()
for(i in 1:length(cases_lines)){
cases_df[[i]] <- data.frame(line=1:length(cases_lines[[i]]), text=cases_lines[[i]])
}
cases_lines <- list(A = 1:5,B = 2:4,C = 7:10)
cases_df <- list()
for(i in 1:length(cases_lines)){
cases_df[[i]] <- data.frame(line=1:length(cases_lines[[i]]), text=cases_lines[[i]])
}
cases_df[[1]]
cases_df[[2]]
cases_df[[3]]
shiny::runApp()
length<-c(250,100,30,10)
dates<-for (i in length){
start_date<-Sys.Date()-i
print(as.Date(start_date))
}
dates_vec <- c()
for (i in length){
dates_vec <- c(dates_vec,start_date<-Sys.Date()-i)
}
dates_vec
dates_vec <- c()
for (i in length){
dates_vec <- c(dates_vec,as.character(start_date<-Sys.Date()-i))
}
dates_vec
is.numeric.Date(dates_vec[1])
is.numeric.Date(as.date(dates_vec[1]))
as.date(dates_vec[1]) |> str()
as.Date(dates_vec[1]) |> str()
is.numeric.Date(as.Date(dates_vec[1]))
is.numeric.Date(lubridate::as_date(dates_vec[1]))
is.numeric.Date(Sys.Date())
as.Date.numeric(dates_vec[1])
Sys.Date()
Sys.Date() - Sys.Date() - 30
Sys.Date() - (Sys.Date() - 30)
Sys.Date() - 30
shiny::runApp()
runApp()
library(shinyalert)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
library(shinycssloaders)
library(plotly)
fig <- iris |>
plot_ly(x = ~Species,
y = ~Sepal.Width,
split = ~Species,
type = "violin") |>
layout(
title = "Dropdown Menu in plotly in R",
updatemenus = list(
list(
buttons = list(
list(
method = "restyle",
args = list("type", "violin"),
label = "Violin Plot"
),
list(
method = "restyle",
args = list("type", "box"),
label = "Box Plot"
),
list(
method = "restyle",
args = list("type", "bar"),
label = "Bar Plot"
)
)
)
)
)
fig
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
dat <- data.frame(word1=c(0.02, -0.1, 0.5, 0.06, -0.03, 0.8),
word2=c(0.7, 0.01, 0.05, -0.23, -0.06, 0.13),
word3=c(-0.52, 0.12, 0.46, 0.08, -0.01, -0.17),
word4=c(0.69, 0.34, -0.11, -0.58, -0.26, 0.35),
word5=c(0.04, 0.08, 0.21, -0.15, -0.04, -0.32),
word6=c(0.39, 0.15, -0.21, 0.59, 0.28, 0.19))
cor(dat)
dat
hclust(dist(dat,method = "euclidean"))
plot(hclust(dist(dat,method = "euclidean")))
plot(hclust(dist(dat,method = "cosine")))
plot(hclust(dist(dat,method = "manhattan")))
plot(hclust(cor(dat)))
plot(hclust(dat))
plot(hclust(dist(dat,method = "manhattan"),method = "ward.D"))
plot(hclust(dist(dat,method = "manhattan"),method = "ward.D"))
library(see)
library(ggraph)
dat |>
plot()
dat |>
correlation::correlation(partial = T) |>
plot()
install.packages("corrr")
library(corrr)
source("~/.active-rstudio-document", echo=TRUE)
graph <- network_plot(correlate(dat))
graph
graph$data
graph$data[[1]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
OpenAlex4NodeXL <- function(keywords, pub_start_date, pub_end_date) {
keywords <- keywords
pub_start_date <- pub_start_date
pub_end_date <- pub_end_date
# create search engine function
search_engine <- function(keywords, pub_start_date, pub_end_date) {
# load software libraries
suppressPackageStartupMessages(library(openalexR))
suppressPackageStartupMessages(library(tidyverse))
# set options
options(openalexR.mailto = "youremail@email.com") # replace with your email address
# search engine
works_search <- oa_fetch(
entity = "works",
title.search = c(keywords),
cited_by_count = ">50",
from_publication_date = pub_start_date,
to_publication_date = pub_end_date,
options = list(sort = "cited_by_count:desc"),
verbose = FALSE
)
return(works_search)
}
# fetch data from openalex.org api
search_data <- search_engine(keywords, pub_start_date, pub_end_date)
# grab authors and group them according to collaboration
authors_collaboration_groups <- list()
for (i in 1:nrow(search_data)) {
authors_collaboration_groups[[i]] <- search_data$author[[i]][2]
}
all_authors <- c()
for (i in 1:length(authors_collaboration_groups)) {
all_authors <- c(all_authors, authors_collaboration_groups[[i]][[1]])
}
# grab author position
authors_position <- list()
for (i in 1:nrow(search_data)) {
authors_position[[i]] <- search_data$author[[i]][4]
}
all_authors_positions <- c() # grab all authors positions
for (i in 1:length(authors_position)) {
all_authors_positions <- c(all_authors_positions, authors_position[[i]][[1]])
}
# grab author affiliation
authors_affiliation <- list()
for (i in 1:nrow(search_data)) {
authors_affiliation[[i]] <- search_data$author[[i]][7]
}
all_authors_affiliation <- c() # grab all authors affiliations
for (i in 1:length(authors_affiliation)) {
all_authors_affiliation <- c(all_authors_affiliation, authors_affiliation[[i]][[1]])
}
# grab authors institution country code
authors_institution_country_code <- list()
for (i in 1:nrow(search_data)) {
authors_institution_country_code[[i]] <- search_data$author[[i]][9]
}
all_authors_institution_country_code <- c() # grab all authors institution country code
for (i in 1:length(authors_institution_country_code)) {
all_authors_institution_country_code <- c(all_authors_institution_country_code, authors_institution_country_code[[i]][[1]])
}
# grab author institution type
authors_institution_type <- list()
for (i in 1:nrow(search_data)) {
authors_institution_type[[i]] <- search_data$author[[i]][10]
}
all_authors_institution_type <- c() # grab all authors institution type
for (i in 1:length(authors_institution_type)) {
all_authors_institution_type <- c(all_authors_institution_type, authors_institution_type[[i]][[1]])
}
# get length of each authors collaboration
authors_length <- c()
for (authors in 1:length(authors_collaboration_groups)) {
authors_length <- c(authors_length, authors_collaboration_groups[[authors]] |> nrow())
}
# create authors data frame
authorAtt_df <- data.frame(
Authors = all_authors,
Position = all_authors_positions,
Affiliation = all_authors_affiliation,
Institution = all_authors_institution_type
)
# I did not want to have to use underscore to separate
# the two words (Institution_Country). That is why I
# created that column in the data frame using back ticks
# instead as shown below
authorAtt_df$`Institution Country` <- all_authors_institution_country_code
# publication attributes
# grab all publications
publications <- list()
for (i in 1:nrow(search_data)) {
publications[[i]] <- rep(search_data$display_name[i], each = authors_length[i])
}
all_publications <- c()
for (i in 1:length(publications)) {
all_publications <- c(all_publications, publications[[i]])
}
# grab all so
pub_so <- list()
for (i in 1:nrow(search_data)) {
pub_so[[i]] <- rep(search_data$so[i], each = authors_length[i])
}
all_so <- c()
for (i in 1:length(pub_so)) {
all_so <- c(all_so, pub_so[[i]])
}
# grab all host organization
hostOrg <- list()
for (i in 1:nrow(search_data)) {
hostOrg[[i]] <- rep(search_data$host_organization[i], each = authors_length[i])
}
all_hostOrg <- c()
for (i in 1:length(hostOrg)) {
all_hostOrg <- c(all_hostOrg, hostOrg[[i]])
}
# grab all cited by count
citedby_count <- list()
for (i in 1:nrow(search_data)) {
citedby_count[[i]] <- rep(search_data$cited_by_count[i], each = authors_length[i])
}
all_citedby_count <- c()
for (i in 1:length(citedby_count)) {
all_citedby_count <- c(all_citedby_count, citedby_count[[i]])
}
# grab all publication year
pub_year <- list()
for (i in 1:nrow(search_data)) {
pub_year[[i]] <- rep(search_data$publication_year[i], each = authors_length[i])
}
all_pub_year <- c()
for (i in 1:length(citedby_count)) {
all_pub_year <- c(all_pub_year, pub_year[[i]])
}
# grab all type
type <- list()
for (i in 1:nrow(search_data)) {
type[[i]] <- rep(search_data$type[i], each = authors_length[i])
}
all_type <- c()
for (i in 1:length(type)) {
all_type <- c(all_type, type[[i]])
}
# grab all abstract
abstract <- list()
for (i in 1:nrow(search_data)) {
abstract[[i]] <- rep(search_data$ab[i], each = authors_length[i])
}
all_abstracts <- c()
for (i in 1:length(abstract)) {
all_abstracts <- c(all_abstracts, abstract[[i]])
}
# grab all reference works
referenced <- list()
for (i in 1:nrow(search_data)) {
referenced[[i]] <- rep(search_data$referenced_works[i], each = authors_length[i])
}
all_referenced <- c()
for (i in 1:length(referenced)) {
all_referenced <- c(all_referenced, referenced[[i]])
}
# update the authors data frame
{
authorAtt_df$Publication <- all_publications
authorAtt_df$`Abstract` <- all_abstracts
authorAtt_df$`Publication Type` <- all_type
authorAtt_df$`Publication Year` <- all_pub_year
authorAtt_df$`Cited By Count` <- all_citedby_count
authorAtt_df$`Referenced Works` <- all_referenced
authorAtt_df$`Host Organization` <- all_hostOrg
authorAtt_df$SO <- all_so
}
# filter out missing values from the data frame
authorAtt_df <- authorAtt_df |>
na.omit()
# move abstract column to behind Publication
authorAtt_df <- authorAtt_df |>
relocate(Abstract, .after = Publication)
# rearrange columns for NodeXL flat file csv format
authorAtt_df <- authorAtt_df |>
relocate(Publication, .after = Authors)
# rename columns
colnames(authorAtt_df)[c(1:13)] <- c(
"Vertex1",
"Vertex2",
"Vertex1 Position",
"Vertex1 Affiliation",
"Vertex1 Institution",
"Vertex1 Institution Country",
"Vertex2 Abstract",
"Vertex2 Type",
"Vertex2 Publication Year",
"Vertex2 Cited By Count",
"Vertex2 Referenced Works",
"Vertex2 Host Organization",
"Vertex2 SO"
)
return(authorAtt_df)
}
# # test software program
mydata <- openAlex4NodeXL(
keywords = c("software", "information"),
pub_start_date = "2019-01-01",
pub_end_date = "2023-09-30"
)
# # test software program
mydata <- OpenAlex4NodeXL(
keywords = c("software", "information"),
pub_start_date = "2019-01-01",
pub_end_date = "2023-09-30"
)
str(mydata)
mydata$`Vertex2 Referenced Works` |> str()
mydata$`Vertex2 Institution` |> str()
mydata$`Vertex2 Institution Country` |> str()
mydata$`Vertex2 Institution Country` |> str()
mydata$`Vertex2 Host Organization` |> str()
mydata$`Vertex2 Cited By Count` |> str()
mydata$`Vertex2 Referenced Works` <- c(unlist(mydata$`Vertex2 Referenced Works`))
#
# view returned data
mydata |> view()
my_list <- list(c("dump","clump","rump"),
c("A","B","C","D"),
c("Mat","Pat","Lat"))
my_list
unlist(my_list)
unlist(my_list) |> length()
my_vec <- function(x){
paste(x,collapse = " ")
}
vec <- sapply(my_list,my_vec)
vec
vec |> length()
mydata$`Vertex2 Referenced Works` <- sapply(mydata$`Vertex2 Referenced Works`,my_vec)
mydata$`Vertex2 Referenced Works` |> str()
mydata$`Vertex2 Referenced Works`
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages(c("archiveRetriever", "archive", "archivist", "systemfit", "SystemicR"))
library(SystemicR)
f_correlation_network_measures(data_stock_returns)
SystemicR::f_plot(data_state_variables)
SystemicR::f_plot(data_stock_returns)
SystemicR::f_plot(f_correlation_network_measures(data_state_variables))
runApp()
runApp()
